/*
 * Copyright (c) 2025, Marc Himmelberger <marc dot himmelberger at inf dot ethz dot ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package encoding_kemeleon

import (
	"bytes"
	"encoding/hex"
	"flag"
	"fmt"
	"os"
	"slices"
	"strings"
	"testing"

	"gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/lyrebird/common/csrand"
	"gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/lyrebird/internal/cryptodata"
	"gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/lyrebird/internal/cryptofactory/oqs_wrapper"
	"gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/lyrebird/internal/kems"
)

var parameterSets = []string{
	"ML-KEM-512",
	"ML-KEM-768",
	"ML-KEM-1024",
}

const minSuccessRate = float32(1.0) // encoding should never reject

// Number of times to repeat correctness tests for applicable KEMs.
var numRepeats int

// Number of times to repeat correctness tests for SamplePreimage.
var numRepeatsPreimg int

func TestMain(m *testing.M) {
	flag.Parse()
	if testing.Short() {
		numRepeats = 10
		numRepeatsPreimg = 1000
	} else {
		numRepeats = 100
		numRepeatsPreimg = 10000
	}
	code := m.Run()
	os.Exit(code)
}

func TestEncoding(t *testing.T) {
	for _, kemName := range parameterSets {
		t.Run(kemName, func(t *testing.T) {
			encodingOkNum := 0
			for range numRepeats {
				encodingOk := testSingleKemEncoding(t, kemName)
				if encodingOk {
					encodingOkNum++
				}
			}

			successRate := float32(encodingOkNum) / float32(numRepeats)
			if successRate < minSuccessRate {
				t.Fatalf("Success Rate of %f too low. Minimum: %f", successRate, minSuccessRate)
			}
			t.Logf("Success Rate of %f acceptable. Minimum: %f", successRate, minSuccessRate)
		})
	}
}

func testSingleKemEncoding(t *testing.T, kemName string) (ok bool) {
	kem := (kems.KeyEncapsulationMechanism)(oqs_wrapper.NewOqsWrapper(kemName))
	encoder := &KemeleonEncoder{}

	encoder.Init(kem)

	// Specific to Kemeleon: Check KEM output size
	if kem.LengthCiphertext() != encoder.kemCtxtLength {
		panic("encoding_mlkem_kemeleon: Received invalid ciphertext size from KEM")
	}

	// KeyGen, Encaps
	keypair := kem.KeyGen()
	ctxt, _, _ := kem.Encaps(keypair.Public())

	// EncodeCtxt
	encodedCtxt := make([]byte, encoder.LengthObfuscatedCiphertext())
	ok = encoder.EncodeCiphertext(encodedCtxt, ctxt.Bytes())
	if !ok {
		t.Log("encoder.EncodeCiphertext(ctxt) failed")
		return
	}

	// DecodeCtxt
	decodedCtxt := make([]byte, kem.LengthCiphertext())
	encoder.DecodeCiphertext(decodedCtxt, encodedCtxt)
	if !bytes.Equal(ctxt.Bytes(), decodedCtxt) {
		c1Exp, c2Exp := encoder.splitCtxt(ctxt.Bytes())
		compr1Exp, compr2Exp := encoder.decodeBytes(c1Exp, c2Exp)
		uExp, vExp := encoder.decompress(compr1Exp, compr2Exp)

		c1, c2 := encoder.splitCtxt(decodedCtxt)
		if !bytes.Equal(c1, c1Exp) {
			t.Logf("c1 don't match")
		} else {
			t.Logf("c1 do match")
		}
		if !bytes.Equal(c2, c2Exp) {
			t.Logf("c2 don't match")
		} else {
			t.Logf("c2 do match")
		}
		compr1, compr2 := encoder.decodeBytes(c1, c2)
		if !slices.Equal(compr1, compr1Exp) {
			t.Logf("compr1 don't match")
		} else {
			t.Logf("compr1 do match")
		}
		if !slices.Equal(compr2, compr2Exp) {
			t.Logf("compr2 don't match")
		} else {
			t.Logf("compr2 do match")
		}
		u, v := encoder.decompress(compr1, compr2)
		if !slices.Equal(u, uExp) {
			t.Logf("u don't match")
		} else {
			t.Logf("u do match")
		}
		if !slices.Equal(v, vExp) {
			t.Logf("v don't match")
		} else {
			t.Logf("v do match")
		}

		expected := ctxt.Bytes()
		for i, v := range expected {
			w := decodedCtxt[i]
			if v != w {
				t.Logf("pos %d: %d != %d", i, v, w)
			}
		}

		t.Fatalf("correctness violation in encoding: expected %x, actual: %x", ctxt.Bytes(), decodedCtxt)
	}

	return
}
func fromHex(t *testing.T, hexString string) []byte {
	val, err := hex.DecodeString(hexString)
	if err != nil {
		t.Fatalf("hex.DecodeString() failed for value '%s'. The error was: %v", hexString, err)
	}
	return val
}

func TestWithTestVectors512(t *testing.T) {
	// Test vectors from https://github.com/C2SP/CCTV/blob/main/ML-KEM/intermediate/ML-KEM-512.txt
	kemName := "ML-KEM-512"
	ek := fromHex(t, "f29c866c361d910341f296c64b46c2a2e30b1535a5c0602593415d156b43036b21b14ba3a0c72e848c5ee03466cab97721d83defdab1f6708971d3c4581441ce397fe7bbc7a08acfdcc417c5f56dfdd4423e306f1f69a86e5b5ba3e031bf92a16702861a51a2feb974f4844812b8302dc83026ea566a1c110cd2c4af48bedd742f1c02cd3fca0dfb8331f414b115849bcb05a2df615b49a90ec0a433e8787e185142aa406003d35409ec842af304459b40fffa0d84340156b5767ee0ca6e2850ec8ccaed317ecf711e27d59b3c985555e44c935988092981da95b42573b9bc38122ed44a800510756429f1b0640685b048597842cbb93dc6b2f9144dcf41a624eb90202a30381410f4cbaaccf61e485524ee593ad7d5974f774ae59ba20c7c6eb0009b39962dc0f828e8538ef583b4dc40c09555a3968ab257d407cc4ab801c7521bf7564b163fab927b4703225b1b497a096b4eb984dfd3512ecb2eaea46fb53c3b3840af3c4aaf78b1461e0564290c0a8f93a1e1b1c50cdb5fd56970046103600a1cc109b58cc32e52c7a168e17107a9c77cc448b01a5a7dc90603d708c6d717c3165e772c74763821f35934a613b0297246370020eb113645d75593c5130072acc0483118067bfb8093b518066318c3f936bd29e8acba8318c68a3c47a1be713c5b5a3c3df82514a5db7f70150b44b3927aa5c7b5507f8e693eed04369340141b1c75069b5f3abb016833b936a1adf7ccbedfe775f0494acb6404307a787e19b2fcba2aa8b3cf94ea6aa4303cfe4821fc9a62ee5acbcaa42556d046e4ab2e65e57e4dcc874276c89f980ac1a52fde549064b7abeab30e81d540af393a51bb917d87098ae238946033f3bb31d82b418ea863b9fc2008613e4751aed8c9aaa41840579116b571ad6df0cfc1185b17612008900d104a83b67a36acd8c783c5b1c21026f03b4ab57b23bd160a103920729b13334395a500a2a5a126bd66c75c5c2a046a97ebb8565cbb65fc6a3e1c11a990e20a9c88c96aa3924961159ef22082e45c86a9bb80d7b8936cc9eec593e5e4523ddc5438c819551328557982cf6784b1720e4ed5ac0add457f573a041465bcbd7ca4e1d7d53eaadeda511962a36eb0")
	dk := fromHex(t, "2d17c4ba262edec00f00f2247692b87bc2564ffc7910f113fb8c7d8b1c3981ac95d8a8488781bedab191e69170151c2ce942191276691eeb395cc29afde6091591ccef038ae9235a201510eef014554626010c9574e7ccfa5657d0999445664045fb20a22a5b3168268b12abfb9933e2486e45b84b8d3973785c8e158915fb499493e0195cf70443bcc4517b7cc323b0051ba31ae44bdb415e63c66fa0f14334f75e376411b91bb7296a18f323b6ef37bee5c8b84ecbb65f9c00bd504b316a9a6a7c6091d28fe65c3436b5c9c0f89a47104767f7b0f79a8fc2901d49e31611b2b18c52b510ac054e926229f532d2187657244836254c193014fde766e8d29038e0a388774cb55335439732bb032399c32301052a8f155e3a49a33914581729b11fe0602bbac54b495c1a96b5ff16152a659617c7b79d8245c7d4aba65b5d5ccc941e24c09dea2630d1acda6811b21b78ac89b662581cba46586257c7348022632948cb1cc8a12c8c6712176e6154d5b2ce9e17b20ed770fc959f03f4a2e251845ca128031c5f37631f6e6241fce131164092ba676483c7050890279672a9f8a2329b752eb9b09eb7e4747e13587ec54b99582e2d905ed2b55ef7aa52a185caacf037d4946a95c94f0b80423fd4884a8370af576f0e4b1b6c851583312500b4420676a288019bfd8c2c24116eec8c5dd5822da84c446e09c47887b9c912b8c1786f9ad83e1d36961750175398606b42b2c3a095d104bc0aac455a72554aa9ac1d9ac5a801ab8c6723d53a259ba20c094bbe3094534c88817703a114f94b2070c4901a4bb7d02858b31dbc614aa7c3a10344956b940eb619adafd9c29397bd63c0600d910e97a0554515163221194dc2bcecb5786f081f79478af2f2559056b66453789ce53877db743a3c8378d20f92b3c42f46a712aa92eb765de933bd0a53a531f552218c5da3b57775881bbd8240eabc1881ec3519ca80243a8fc4ccaa7108099a959726b72aee522780649c91f4a82aab2045834b2f64039e542c37b7b81f602be2f0688cb5250f295591c999390499822140ff4325011860fa753b81e85bf29c866c361d910341f296c64b46c2a2e30b1535a5c0602593415d156b43036b21b14ba3a0c72e848c5ee03466cab97721d83defdab1f6708971d3c4581441ce397fe7bbc7a08acfdcc417c5f56dfdd4423e306f1f69a86e5b5ba3e031bf92a16702861a51a2feb974f4844812b8302dc83026ea566a1c110cd2c4af48bedd742f1c02cd3fca0dfb8331f414b115849bcb05a2df615b49a90ec0a433e8787e185142aa406003d35409ec842af304459b40fffa0d84340156b5767ee0ca6e2850ec8ccaed317ecf711e27d59b3c985555e44c935988092981da95b42573b9bc38122ed44a800510756429f1b0640685b048597842cbb93dc6b2f9144dcf41a624eb90202a30381410f4cbaaccf61e485524ee593ad7d5974f774ae59ba20c7c6eb0009b39962dc0f828e8538ef583b4dc40c09555a3968ab257d407cc4ab801c7521bf7564b163fab927b4703225b1b497a096b4eb984dfd3512ecb2eaea46fb53c3b3840af3c4aaf78b1461e0564290c0a8f93a1e1b1c50cdb5fd56970046103600a1cc109b58cc32e52c7a168e17107a9c77cc448b01a5a7dc90603d708c6d717c3165e772c74763821f35934a613b0297246370020eb113645d75593c5130072acc0483118067bfb8093b518066318c3f936bd29e8acba8318c68a3c47a1be713c5b5a3c3df82514a5db7f70150b44b3927aa5c7b5507f8e693eed04369340141b1c75069b5f3abb016833b936a1adf7ccbedfe775f0494acb6404307a787e19b2fcba2aa8b3cf94ea6aa4303cfe4821fc9a62ee5acbcaa42556d046e4ab2e65e57e4dcc874276c89f980ac1a52fde549064b7abeab30e81d540af393a51bb917d87098ae238946033f3bb31d82b418ea863b9fc2008613e4751aed8c9aaa41840579116b571ad6df0cfc1185b17612008900d104a83b67a36acd8c783c5b1c21026f03b4ab57b23bd160a103920729b13334395a500a2a5a126bd66c75c5c2a046a97ebb8565cbb65fc6a3e1c11a990e20a9c88c96aa3924961159ef22082e45c86a9bb80d7b8936cc9eec593e5e4523ddc5438c819551328557982cf6784b1720e4ed5ac0add457f573a041465bcbd7ca4e1d7d53eaadeda511962a36eb0a9ce0ecbcfbbbd9a2636e23a0c1c22683943639cd44af051ff235b8dfbb73a4dc6f5785a6f2b42e843228be53eb768d64c6f9d4355ae95f083e51ed57c437310")
	K := fromHex(t, "62a8c220b01793ecd183dea9762c5602211e0aab001cbc892d0a95693ab17cc1")
	compress_u_0 := []uint16{918, 369, 440, 277, 347, 731, 523, 493, 485, 282, 189, 787, 358, 409, 95, 937, 1017, 282, 101, 95, 956, 294, 84, 886, 494, 485, 306, 272, 166, 306, 766, 464, 451, 363, 793, 687, 203, 883, 235, 57, 695, 825, 117, 227, 672, 90, 170, 847, 239, 487, 546, 783, 63, 324, 920, 815, 911, 332, 124, 797, 1015, 336, 520, 946, 356, 886, 473, 289, 82, 257, 587, 181, 82, 678, 189, 962, 252, 419, 93, 594, 278, 968, 437, 846, 111, 348, 131, 881, 381, 886, 239, 603, 255, 148, 540, 753, 22, 924, 348, 869, 42, 222, 133, 809, 22, 821, 873, 543, 96, 441, 767, 636, 650, 728, 40, 223, 875, 217, 482, 990, 884, 711, 136, 522, 990, 819, 223, 929, 141, 644, 600, 485, 251, 533, 407, 164, 465, 876, 1017, 886, 440, 339, 742, 889, 901, 903, 473, 561, 643, 10, 844, 133, 487, 372, 961, 420, 995, 992, 986, 414, 970, 117, 281, 165, 1006, 572, 892, 387, 999, 573, 577, 805, 751, 508, 469, 601, 485, 366, 601, 37, 660, 520, 96, 651, 449, 85, 647, 683, 260, 142, 58, 292, 773, 771, 470, 703, 912, 398, 801, 24, 990, 365, 70, 631, 580, 66, 37, 698, 83, 244, 228, 38, 382, 37, 322, 163, 417, 306, 639, 26, 770, 314, 181, 82, 785, 247, 540, 129, 978, 682, 726, 4, 321, 675, 633, 748, 888, 151, 1016, 506, 925, 548, 495, 557, 412, 668, 689, 754, 750, 940, 775, 87, 801, 112, 156, 118}
	c1 := fromHex(t, "96c7855b455b6dbb607be569d4cbc46665f645eaf96b54c617bc9b4485ddee95271344a6c8e42f74c3ad95f1abcbccbd4e0eb7e65cc738a06aa1cad3ef9c27e2c33f1085f9cb8f33c547c7f74385a0ec64d99d5d485204b4642d5298da8bf0fc8cd6859416215f9bd36f703548dc7dd9fdce96ff50c261bc1670ce55d92a785348ca16d49cf68760e4f62f9f8a628bc2376b67239ef7741f8b8882decffc4de88d108a6579fb54781929d1b19dbfddb84d656ede851f9e5d8c832ac07421e7d1153c69e383afbd67cad7915129eef3c8f760e7f71864c9eff2575d96e5b9956509942208c6a2c15571e8aa0439a20349050f6cddaf903b163206deb765c49d440a5182ae53d0438e097e9520d428a1c9f4a70602eb548b1411dfc36120d2ab6a2d01418d9a27bb785f82bf7e9d93f85e8b9c711aabbceeb27ef01521c3c1891de892ffaaf5e03810479c6907dd09e2d71930d6bf2b99ddf05898c2610681226f5a4bf1c006e940deb9665432396d4920336c413471e077c38b85413b21e5836daee8cb4446bf328ab759bc4277fbc1043e67fe664358ea352f1babe7a1fd363d41e37a5207325c565e1794c3ce36ec97fd72fd7f04a18a266383630e92e02e9700a26830c6ead2057a7883bb46606e64efbd92feb5a87cf8eb40835b3f201288af60abb625972f774608e65189e016cc7b61ac28806966173e55d8572f7eb5f5f2de7adcad59f00e6f66623e7640645069877b779d373ad09400dfa2dcedeb65c9786bb7cac61de399eec7779ddbebda8a3262054a1318157de19d76612f71ae5829cec49a7b895f36e72cdc215058338aa4d9b99815ed13def463bb27ad3e8a9d0995f964436519bd7037e3cf73f79bec5115762ba82314d2152701e325aefb")
	compress_v := []uint16{3, 3, 7, 10, 13, 12, 9, 11, 2, 7, 12, 1, 12, 7, 1, 9, 12, 12, 4, 8, 3, 6, 14, 3, 9, 6, 10, 11, 5, 12, 0, 14, 15, 11, 7, 10, 14, 11, 8, 2, 12, 11, 9, 4, 6, 6, 9, 5, 6, 13, 14, 4, 9, 14, 12, 13, 11, 13, 13, 15, 8, 3, 14, 4, 4, 10, 14, 8, 1, 10, 5, 2, 11, 10, 9, 8, 3, 10, 6, 11, 1, 14, 0, 13, 9, 6, 11, 2, 2, 7, 11, 8, 7, 1, 1, 1, 1, 1, 1, 1, 13, 5, 11, 2, 12, 15, 5, 0, 10, 5, 3, 7, 13, 11, 3, 12, 10, 7, 0, 7, 2, 15, 4, 1, 12, 5, 13, 7, 5, 1, 6, 10, 11, 9, 14, 1, 10, 11, 7, 13, 1, 8, 15, 13, 3, 10, 13, 12, 5, 11, 1, 4, 11, 8, 13, 2, 9, 2, 9, 9, 3, 3, 8, 5, 7, 5, 6, 2, 8, 15, 4, 8, 2, 10, 11, 0, 15, 6, 1, 6, 2, 6, 10, 4, 2, 5, 12, 0, 14, 6, 9, 14, 13, 1, 9, 11, 13, 4, 4, 15, 15, 2, 15, 11, 13, 0, 15, 0, 15, 6, 11, 3, 15, 11, 6, 1, 15, 11, 15, 11, 14, 4, 0, 15, 4, 1, 6, 11, 4, 4, 12, 12, 10, 4, 0, 6, 1, 8, 11, 8, 1, 3, 14, 10, 6, 15, 12, 4, 11, 11, 0, 6, 10, 13, 15, 3}
	c2 := fromHex(t, "33a7cdb9721c7c91cc84633e69bac5e0bfa7be28bc496659d64ee9dcdbfd384ea48ea125ab89a3b6e1d0692b728b171111115d2bfc055a73bdc37a70f2145c7d15a69b1ebad781dfa3cdb5418b2d299933585726f884a20b6f61624a520c6ee91db94df42fbf0d0f6f3bbf16bfbf4ef014b644cc4a60818b31aef64cbb60da3f")
	c := fromHex(t, "96c7855b455b6dbb607be569d4cbc46665f645eaf96b54c617bc9b4485ddee95271344a6c8e42f74c3ad95f1abcbccbd4e0eb7e65cc738a06aa1cad3ef9c27e2c33f1085f9cb8f33c547c7f74385a0ec64d99d5d485204b4642d5298da8bf0fc8cd6859416215f9bd36f703548dc7dd9fdce96ff50c261bc1670ce55d92a785348ca16d49cf68760e4f62f9f8a628bc2376b67239ef7741f8b8882decffc4de88d108a6579fb54781929d1b19dbfddb84d656ede851f9e5d8c832ac07421e7d1153c69e383afbd67cad7915129eef3c8f760e7f71864c9eff2575d96e5b9956509942208c6a2c15571e8aa0439a20349050f6cddaf903b163206deb765c49d440a5182ae53d0438e097e9520d428a1c9f4a70602eb548b1411dfc36120d2ab6a2d01418d9a27bb785f82bf7e9d93f85e8b9c711aabbceeb27ef01521c3c1891de892ffaaf5e03810479c6907dd09e2d71930d6bf2b99ddf05898c2610681226f5a4bf1c006e940deb9665432396d4920336c413471e077c38b85413b21e5836daee8cb4446bf328ab759bc4277fbc1043e67fe664358ea352f1babe7a1fd363d41e37a5207325c565e1794c3ce36ec97fd72fd7f04a18a266383630e92e02e9700a26830c6ead2057a7883bb46606e64efbd92feb5a87cf8eb40835b3f201288af60abb625972f774608e65189e016cc7b61ac28806966173e55d8572f7eb5f5f2de7adcad59f00e6f66623e7640645069877b779d373ad09400dfa2dcedeb65c9786bb7cac61de399eec7779ddbebda8a3262054a1318157de19d76612f71ae5829cec49a7b895f36e72cdc215058338aa4d9b99815ed13def463bb27ad3e8a9d0995f964436519bd7037e3cf73f79bec5115762ba82314d2152701e325aefb33a7cdb9721c7c91cc84633e69bac5e0bfa7be28bc496659d64ee9dcdbfd384ea48ea125ab89a3b6e1d0692b728b171111115d2bfc055a73bdc37a70f2145c7d15a69b1ebad781dfa3cdb5418b2d299933585726f884a20b6f61624a520c6ee91db94df42fbf0d0f6f3bbf16bfbf4ef014b644cc4a60818b31aef64cbb60da3f")
	u_d := "a80b4b965538688494a4366429563966f29f8c24533561beea5c3948511324cc3b1101b4469662e343371c323eba495ebac549129a8b9472b3fc920bd3a8a77c212e8958122922ac09f362ef269fcdd041afaba5927b4393f1a1e44c449b36c08504b402c63a0b413474c7240bc1896672c33323552eb17888b3c48de5ab69b146aa01b3d704b409837a3d131edc069948c0bb6b94b089202db061a448d0a6165b6e38a159bd498141f89382502d1d1b2c1f26c93a7b90ba116a927ca6d5c2bccae1829f976230536c2b5521e805b2ea0cb496e5446ca9b4718bb70206722a1802b80a1b2f964b345c55a39cc9852c5451cc17928321c64c7454ab4eb07c745497a3893967f5257a29664aa2870762b869384184b4451137c88a4de31cbd503bd1b99cf8d58e95eb502cea04923c4ae430805e770d78d08d0e9131e5c207da84071724214c353e1d5805c7d93f4cb210f83932dc361a6b9c8a38d9001424890a089847bb1ee7dc66bf6b6f4936713bc587c038998609bfd8b9112cca16fb01187369cab988c7d8e2026f017f164ba9feb1b7fb450182d49bccc3b0eb29486fc8164ce1682f8a874c12c4f148752ea0b4da2839395a2ea3b40363ca57d3a00f9756613bfc474e2030ac93323fa98db33c3e45719b23f76138059997fa9465e0038a2abbe9b7369fd74c96f915ed9b18858c2c07442af6eb4297869e89a44c4b802eff822cc09cb05adacd9d310d29521f038b2decb27659495d1db083527150b058ab91266eb36098e4f0ba6477c2e768bdf6fa8893a19b2eb06ae91a03af936e39f293198b1eac4b5d4fb1062c26799b8612582c1304f920e05453c064321401669d69668d652649c6630bc67dd1090ce9171facec5fd0100565f86d51fbae4a2b2fa482074c46840b069bb297a3475b602c92a11f7a807669a2c3f496e7d8b141781c18213c3e4042681cb77fe812a0d95b368279dff29fb52b7b66162cef529edf0641df8a846bc7b059c248281910d26233102c20b31885fec50725a540b05052929309448bb862bc60ad35c048144fd3988872001b6fb41fc4694c5f69cc"
	v_d := "700227b01582911a9c51178fa0015bc1090dc1095bd01075c1199c40136870024e610b2751074e21188f10149c0010b6311c8fb01582611b8f81061ac1198f510734e0044e510741e014a9610b345117b6c119a9f118a9911ac3810627610b34401382611b68d0108210041af11882511768701282e0148fd010b60010a951074ef1081aa0015bf11868b0050dd0000dd0000dd0000d910a41f1081ac119c310040021084170025b911a8f70129c21085b00005ba011c340030dc10941910a5b10040de01482f11875610b0d21188fb015a9d01068311ca9701282911a9c10148fd00034f11868910a1a51071a511775700227810641b00541e0041a8116c3401368a01182f10800310c4ed0004ea0014e210834a00141c10900610b4e5117b6910a0d51178f910a344013c3310c1a311c8f910a00310c00310c4ef10827311c8fe0040d311c8f311c8f610b340010c340030de0148f400334c1199c21083400004ed01068f11868d00027611b82e014c3c10934f1188f00004e2118a9310c27"

	testWithTestVectors(t, kemName, ek, dk, c, K, c1, c2, compress_u_0, compress_v, u_d, v_d)
}

func TestWithTestVectors768(t *testing.T) {
	// Test vectors from https://github.com/C2SP/CCTV/blob/main/ML-KEM/intermediate/ML-KEM-768.txt
	kemName := "ML-KEM-768"
	ek := fromHex(t, "d0f1a25721155a28143a355f99c582c2d258a270b9f78941af004116e94f2f9825af17c50b600705ea1a9c2440df6803518a5ba558acb5b732d06a3c80e555fa374d80d82f08c5b47ca12cbe6520340538c2100b5e094392acacafe1ce4ad74fa451c4379219140103e9c3ba7ba683cddca0d3b02d57104c292b2e25bc791d8b11d5079477d7b0f930176fb0a5cda99afbfb6fca86226cb8152b250a536ca60b6ccf93880007068b41bbc5c6e9b8bd92af8a717e37c69ac7db7e76a2c36eb028c1e098915274b4d59def6c42d3c25bb35310846809c96bc43b639e52a3730654cc8db548faf21e446ca874a3caba777bac25b56902481c79a744d70d12130ad6bc8136349e3234c556267e97b0a8ccf772528299fa26111172c223f2484102917bdb6de7770682698763e5b2038779f812363a727f40949b76b6913c8910d6f51dd48983ba149c070590582662fbc9053b667e1eea1ca7173e421576f2d8ad7bf415899484bd1530b4fc855354952cf28d0f1216dfba00ec100bdd76c4f4b405c913baa78958ae31c578463877138cf89255a3935cfbd1b77dbb5f66b87543131da4aabb6781427f417e841141dcb47fcd82a92aeb3c50030d71eb7f3b17b0207a6cdf654d563a420bb742ac30c0e01235910886ff045652d5035b7ab98a1b6abac88ea5996b965c2d3f3305e075bbca267e8547c6c7769fb9f91e20849b524b7822965fe036a515c60e24636a3665b23b878c5b7658f7c49f2059255c89536426510875cbdca111bdc29183459340c125df30c05a7698490193d88c52410a14a7f12a118495413487b434568d105f2d7b9c0fc32e80a13e142528ca1825e0830cd41071aac7124042145be35e30d541c2ba31a82a5f479b3bad881164aa347386c9bfa505c9968fdea866120c8b4e809bdb1482d790a03fcb1ca88c15aae8047e1678ba66833ca430d592638bf3be19592027b3ccb044a9a4d01f3804c2fe0ca60cc7c017dc14dff60562f20d912650fc24449a78998d2b0ce4d9b131955affe7b5c12278cb5b23847c8090fc0578f71760918e9ee8274673845ca29f8d338fa89637265c518f902a9ba8ad9615764ce9835b322e0b5bb1fe928888318988e435cc3c3a918ccc773371a9687884f0822558ae634a54d7c74556528f2d7cb212f1901a82ae68905330b4550518b7b44c117f335f9c818635a2a29e59b39784b021d88354d707cfe0b3599b54fa4a1218261dc72a00cf2ccef8c6c2fe131899f9a239f545c4605296d7b39beb0832732eb608464df29d193b2f2c3b7c69cbbc2082cda14863071235a75544320c1c7930262f82ac7ba788c6c09586c2420d7385a0a6c50d050910e2956844b558fa78b6cb2969e866a0bcc1b7b980a02669c226b6c9267f6e66995d6b37eedc8e34f516ef48a69a3461f3742cc6268b26a8c158e4bf34c072d4e37a4e273ee3464aea81b57c52ab4d5a1e94a668c9a14612196f6a792646581a8ff545179323aaa8369c21181c1329464099cdf940fa56ce1f204ad4b048d5e783e1948b3493b273b2a33d8c0183e386786c7e7e421b1536610cecb16b7a98641b95693879a7d8bc444931cedaa6c45303aac0a48ac29041085526ffff11b531b1800f4e1fa75c4d008c4f9a112932c669d543551204405da8b4")
	dk := fromHex(t, "3261790e9484c6453502778de5faccecc56d94fbbb3d6a039d03ceb70b254f2a201a9192b5992885eb6c9f44b9bb70c584cc4891782e47caa4124cab6db66f6eacb09aec6d6cf5324ed22cfc2a3ca366ad3da0b0b9b0aa1ae7c07c9776c7f2734c28a4a57577378aa2b7fa49e489a8f7a2c80d360e622a3a41180fb1167e56533ff3e3a00365090b8455170896946c7fe95b100cd176bf3c442d6c96e8d4b996a980d671a2406c15a826cab288359cfa2b5a3580f5bb5584b6c8dcbc5024c7149fbc580f081da2eb739a1c560a39b1d1b02b15f730fef1315589455ca13e3409526a5640f3924090586cfd376c21375b77630b7e0aabdc8c811e564c7155158ac14cff898ee621af8c05cfcd2cc41be341215818e6e5a37c167a381ba1c4a65724f64da94ac06e530d260229bb2c61a1d17630aa3b3f4aa4a1db7f740bafbd9aba41490f19b6127dfb651c2032317123662830c6eab9ed4b47037c30a5d4048ea69de1769323a85726766277a82554c00cf3b500f6a9ba070b6e1e010fe667429d5259d027ccaaec559c760ae99b62c014cf76b08c89a72d3e233af5251976e288da3a8fa2820e6ca8ca953ab8f504060fd2c0104558af67c34691c1c4c2878d5904c94390b1639548e206659804a3759a6a7930921a3fc2853d8e90cd94b523fe1a30704030f04b9d4fc919fd22c27966aa53180916009e3f831a47b53f5951087d110c010cb81a415d88c3cb19031e3f30a21496903f59ce75742227b22ca7687ad3b05c0aca42e3747bc5fb1683b796a10bac6a158a745836478829707b70aca820d3a9b6adda8091bc0c44c9bca1f57bae60165940ac87815c1e36a783a88b2b68655d22ccebd1490d4440a00775dd1a68f0d3125c7cb48d8a91db2993542c5541137e817206705bb23a261eb3740d952b1af92181f8a629e156b7a6d703d9225706a5bee26845bd80552df9a620f16b4c1444ed2514ec8c2aed453bedb9805174ada9610c91aca500ccb221c109a56377bfc043fc0410340c0d4a509be7d1252d65af888905ad42bfd9cc0e84b63d82032de9cb1cc1264fb6b65c2304818c566fdb36c47e43b3e43b405f7b8944340f78830901507d145b1818c86d9b003d03e5a33310ca66c44d63b2bdb427cc0dd68fd32176292359ce639c9177454e6a36d7cb808e13a9d309310b455202ec6bcf2891d2590755b92e4f0354e766b049d77b4b5cbd8b332a6d1261cc58a384ebb842d92273202eb7b45570cc42fb039c18b4a1308062d6710601c209f5b425d3a6b8735911fdb6bb26a556595c5e69d66a5fc346552526d8a8a292b3cda869b28fab0b2cb6162e583e8c9c558c4c8c457cb83e67c2f03960011091fdf5a35b88712d3aa5e0d0961242653850acca27be2a8523b0557dc38a3fd90acddb190c813c3e86d50e2dac874f2316c607a3582aacef1c14dee409551a9e02f60e9737c9940799b39932cd645341444414c77f4fa9046ee4020fb68d607b46759615803572502a296c291965b2c92320c663d504e06a0bce3286a854c74a6256e168c0b750805359986493a25f75b5f8923bbbd4b2a30b6e9092ce0a5035939c47e900c4235a447796a426713e1bd269a13493d0f1a25721155a28143a355f99c582c2d258a270b9f78941af004116e94f2f9825af17c50b600705ea1a9c2440df6803518a5ba558acb5b732d06a3c80e555fa374d80d82f08c5b47ca12cbe6520340538c2100b5e094392acacafe1ce4ad74fa451c4379219140103e9c3ba7ba683cddca0d3b02d57104c292b2e25bc791d8b11d5079477d7b0f930176fb0a5cda99afbfb6fca86226cb8152b250a536ca60b6ccf93880007068b41bbc5c6e9b8bd92af8a717e37c69ac7db7e76a2c36eb028c1e098915274b4d59def6c42d3c25bb35310846809c96bc43b639e52a3730654cc8db548faf21e446ca874a3caba777bac25b56902481c79a744d70d12130ad6bc8136349e3234c556267e97b0a8ccf772528299fa26111172c223f2484102917bdb6de7770682698763e5b2038779f812363a727f40949b76b6913c8910d6f51dd48983ba149c070590582662fbc9053b667e1eea1ca7173e421576f2d8ad7bf415899484bd1530b4fc855354952cf28d0f1216dfba00ec100bdd76c4f4b405c913baa78958ae31c578463877138cf89255a3935cfbd1b77dbb5f66b87543131da4aabb6781427f417e841141dcb47fcd82a92aeb3c50030d71eb7f3b17b0207a6cdf654d563a420bb742ac30c0e01235910886ff045652d5035b7ab98a1b6abac88ea5996b965c2d3f3305e075bbca267e8547c6c7769fb9f91e20849b524b7822965fe036a515c60e24636a3665b23b878c5b7658f7c49f2059255c89536426510875cbdca111bdc29183459340c125df30c05a7698490193d88c52410a14a7f12a118495413487b434568d105f2d7b9c0fc32e80a13e142528ca1825e0830cd41071aac7124042145be35e30d541c2ba31a82a5f479b3bad881164aa347386c9bfa505c9968fdea866120c8b4e809bdb1482d790a03fcb1ca88c15aae8047e1678ba66833ca430d592638bf3be19592027b3ccb044a9a4d01f3804c2fe0ca60cc7c017dc14dff60562f20d912650fc24449a78998d2b0ce4d9b131955affe7b5c12278cb5b23847c8090fc0578f71760918e9ee8274673845ca29f8d338fa89637265c518f902a9ba8ad9615764ce9835b322e0b5bb1fe928888318988e435cc3c3a918ccc773371a9687884f0822558ae634a54d7c74556528f2d7cb212f1901a82ae68905330b4550518b7b44c117f335f9c818635a2a29e59b39784b021d88354d707cfe0b3599b54fa4a1218261dc72a00cf2ccef8c6c2fe131899f9a239f545c4605296d7b39beb0832732eb608464df29d193b2f2c3b7c69cbbc2082cda14863071235a75544320c1c7930262f82ac7ba788c6c09586c2420d7385a0a6c50d050910e2956844b558fa78b6cb2969e866a0bcc1b7b980a02669c226b6c9267f6e66995d6b37eedc8e34f516ef48a69a3461f3742cc6268b26a8c158e4bf34c072d4e37a4e273ee3464aea81b57c52ab4d5a1e94a668c9a14612196f6a792646581a8ff545179323aaa8369c21181c1329464099cdf940fa56ce1f204ad4b048d5e783e1948b3493b273b2a33d8c0183e386786c7e7e421b1536610cecb16b7a98641b95693879a7d8bc444931cedaa6c45303aac0a48ac29041085526ffff11b531b1800f4e1fa75c4d008c4f9a112932c669d543551204405da8b4704649a5d8034c6224ae18950bd7b979342c03c7499f7bab9cdea742db9e086cd1d49a515250dbceb9f6e3fcc1c7d5306918964b21ddb22207e03e57f0600da8")
	K := fromHex(t, "4b4eba37eff0315dc6009dcffb4dfbbb680f8f2ebde8715fa3d6daf70256a2d9")
	compress_u_0 := []uint16{943, 301, 130, 414, 267, 479, 868, 633, 480, 275, 919, 193, 58, 528, 923, 846, 149, 891, 748, 78, 593, 103, 865, 567, 496, 202, 937, 319, 984, 485, 354, 234, 748, 766, 462, 251, 408, 97, 328, 333, 190, 135, 569, 867, 491, 353, 377, 899, 580, 691, 264, 711, 279, 345, 163, 1, 626, 549, 964, 227, 767, 698, 782, 1000, 498, 448, 527, 801, 48, 240, 6, 832, 694, 448, 587, 805, 3, 1017, 1018, 1, 864, 767, 532, 140, 286, 152, 532, 183, 529, 54, 364, 563, 484, 433, 474, 709, 985, 875, 481, 830, 235, 306, 795, 58, 347, 826, 90, 150, 659, 863, 528, 218, 874, 392, 221, 595, 321, 49, 114, 882, 299, 958, 844, 939, 853, 717, 225, 0, 791, 8, 721, 395, 293, 138, 662, 5, 796, 552, 587, 11, 434, 563, 412, 101, 111, 978, 158, 862, 968, 523, 599, 36, 352, 244, 78, 798, 304, 593, 335, 752, 655, 709, 959, 334, 940, 218, 955, 740, 357, 290, 884, 559, 14, 156, 72, 92, 636, 1014, 407, 175, 428, 94, 450, 792, 913, 446, 816, 510, 281, 297, 811, 565, 94, 977, 315, 588, 534, 95, 374, 659, 362, 587, 736, 724, 504, 376, 757, 247, 590, 952, 747, 294, 267, 46, 71, 605, 30, 36, 348, 729, 504, 10, 63, 269, 102, 944, 803, 55, 921, 886, 97, 682, 30, 741, 827, 340, 266, 261, 115, 372, 807, 9, 172, 634, 262, 476, 45, 620, 774, 449, 420, 236, 82, 140, 781, 512}
	c1 := fromHex(t, "afb72488670b7d47769ee04d7479303a40b8b9d395eccdae13519e11f68df02993fa4fd89727963aecfaebdc3e9885815453be1c92e3d8eb8595d7e044ce8ad0b11765354a00729648fc38ffeaea30faf201f760c830c06300d0b602b764c903e4af7f0060ff4b21231e6142e12d11dac0d68ce4c5a65db1d9af1d9ecfebc8b4b10e5be9ac8525937e0da1366a23d6cd9441c52087dc2bf9cef4ea55371b0e00172310ed6225296269011ca3b8e402b2cdc859196f48ef89d7c82f78250960d1e384c73045f914bc8f16fbbb53ac6bb33bb9658944f78b0e708204177cda7fd92bac79211cc691fb06b37f19a5b4728d5e44bf1393167e61d7a46a2d092eb5f8e155ef3d4ee2beae490bb97044971e90c055b6f829f0434366c03ef20d99db1d86aa1e94bb33550a1534075d2727c08a9e0671d7029b0607471a3b5230d2308006bd48533a2d34ee1a4e2badd2e29a7c76c83984fa0aadb9954c99a1258faecb5ac9304619c8ff6003510ea38a720006ce7b96ae58e668b90cd310c05a6d3be3a3f1ca5749596919811fbbc324bbd2025b680e4e5f595e1e83865f05494415a0c979107c5e880133526cb60b82314b6bfe0d7a2d4be6e936fa9d9fe64e16fcce1207bff6e28fb3a7f2fa0a019745cd0d53a44553a19cf96be357a4cfcde068389f47347b7b977f73755ccf05afead81b488fce6f2964def2b6d1a59557ba59ad71af9c2900b63836ff669e8de1438b929edf802d59f1c4b76f65d04f7ceb8f9e36f87d4d8391007e1990191938e14856ed4f84f63d38b9b655189d7f76ef508204af931a75e1fd011ff899f13d0bfff972cb1a679e2f073587dfdf3b8a6457fe897fcefd1ff8956bf3d7ad1355611ddd9002af05ba9f3a66346ab26b015035be428f3146227be21447c9dc002d7ea371f2e98a156a1f2f2205d43961fdadd1939763ee054d07ca1a6f1bae0f102d207a9f11039d5b6041d9e92071d72f755c57f3525d0e1e954a1e465b5406fd5af583aca7e48cdc5a9c266ddae6f3c124c4a9698aed2d69ce2c4d25485d70480fdd0da18a4f6d42aeaf97baa4858b440602582a634f96938eadb63f9cc74ac1e54fd0772a3ff66fa92dbdb6a4ec7c7923d0ee6fb5f9bc300701ac6c2f920d7e23188ed6798cf47f0df850f40a471cc8840ecbaf7834bb5b78b3ace2bd0a5e9dee5fafda8d73388671abe30574ff6e0478e3d1138d50289cd8254129a9cc3a7ac758428d73cf58ed848abb192c70b842809b141b4e82a899bcbd4d281f15443287bc3eec2330367688da43f24e30f3ad10f435508b461608b18d3baead359c35dd61d29ff574a100686c8b4521a82a10588cc1")
	compress_v := []uint16{12, 1, 1, 9, 15, 15, 8, 1, 12, 11, 2, 15, 11, 0, 12, 6, 12, 1, 15, 13, 3, 12, 3, 2, 0, 11, 15, 9, 3, 3, 0, 13, 9, 0, 2, 7, 0, 11, 4, 10, 7, 4, 13, 13, 2, 13, 1, 10, 9, 13, 12, 5, 2, 3, 15, 14, 12, 12, 13, 9, 6, 2, 4, 2, 0, 2, 10, 0, 3, 10, 0, 11, 9, 4, 3, 15, 2, 8, 8, 14, 9, 10, 7, 8, 7, 10, 15, 6, 11, 10, 11, 5, 13, 13, 0, 8, 9, 8, 8, 8, 7, 10, 5, 12, 2, 10, 12, 13, 3, 9, 15, 9, 11, 2, 4, 3, 11, 15, 7, 10, 11, 13, 1, 7, 4, 8, 11, 8, 12, 1, 10, 10, 10, 6, 0, 2, 2, 4, 15, 4, 1, 2, 6, 3, 12, 11, 13, 5, 15, 0, 12, 8, 4, 0, 3, 6, 15, 9, 8, 12, 8, 1, 14, 12, 10, 2, 9, 13, 11, 4, 12, 15, 7, 0, 8, 2, 1, 9, 5, 4, 6, 1, 5, 7, 6, 12, 6, 5, 12, 6, 6, 13, 8, 6, 6, 11, 14, 10, 14, 5, 15, 15, 1, 7, 1, 10, 15, 15, 14, 5, 15, 12, 7, 5, 9, 6, 7, 8, 12, 0, 8, 1, 11, 2, 1, 3, 0, 12, 7, 15, 14, 9, 1, 3, 0, 14, 4, 4, 14, 14, 7, 12, 9, 15, 14, 15, 10, 14, 1, 4, 14, 6, 1, 4, 11, 0}
	c2 := fromHex(t, "1c91ff18bcf20b6c1cdfc323b09f33d00972b0a447ddd2a1d95c32efcc9d2624200aa3b049f382e8a987a76fab5bdd808988a7c5a2dc939f2b34fba7db71848b1caa6a20424f2136bc5d0f8c04639fc818ce2ad94bfc072891451675c6566cd668b6ae5eff71a1ff5ecf5769870c182b31c0f79e31e044eec7f9feea416e410b")
	c := fromHex(t, "afb72488670b7d47769ee04d7479303a40b8b9d395eccdae13519e11f68df02993fa4fd89727963aecfaebdc3e9885815453be1c92e3d8eb8595d7e044ce8ad0b11765354a00729648fc38ffeaea30faf201f760c830c06300d0b602b764c903e4af7f0060ff4b21231e6142e12d11dac0d68ce4c5a65db1d9af1d9ecfebc8b4b10e5be9ac8525937e0da1366a23d6cd9441c52087dc2bf9cef4ea55371b0e00172310ed6225296269011ca3b8e402b2cdc859196f48ef89d7c82f78250960d1e384c73045f914bc8f16fbbb53ac6bb33bb9658944f78b0e708204177cda7fd92bac79211cc691fb06b37f19a5b4728d5e44bf1393167e61d7a46a2d092eb5f8e155ef3d4ee2beae490bb97044971e90c055b6f829f0434366c03ef20d99db1d86aa1e94bb33550a1534075d2727c08a9e0671d7029b0607471a3b5230d2308006bd48533a2d34ee1a4e2badd2e29a7c76c83984fa0aadb9954c99a1258faecb5ac9304619c8ff6003510ea38a720006ce7b96ae58e668b90cd310c05a6d3be3a3f1ca5749596919811fbbc324bbd2025b680e4e5f595e1e83865f05494415a0c979107c5e880133526cb60b82314b6bfe0d7a2d4be6e936fa9d9fe64e16fcce1207bff6e28fb3a7f2fa0a019745cd0d53a44553a19cf96be357a4cfcde068389f47347b7b977f73755ccf05afead81b488fce6f2964def2b6d1a59557ba59ad71af9c2900b63836ff669e8de1438b929edf802d59f1c4b76f65d04f7ceb8f9e36f87d4d8391007e1990191938e14856ed4f84f63d38b9b655189d7f76ef508204af931a75e1fd011ff899f13d0bfff972cb1a679e2f073587dfdf3b8a6457fe897fcefd1ff8956bf3d7ad1355611ddd9002af05ba9f3a66346ab26b015035be428f3146227be21447c9dc002d7ea371f2e98a156a1f2f2205d43961fdadd1939763ee054d07ca1a6f1bae0f102d207a9f11039d5b6041d9e92071d72f755c57f3525d0e1e954a1e465b5406fd5af583aca7e48cdc5a9c266ddae6f3c124c4a9698aed2d69ce2c4d25485d70480fdd0da18a4f6d42aeaf97baa4858b440602582a634f96938eadb63f9cc74ac1e54fd0772a3ff66fa92dbdb6a4ec7c7923d0ee6fb5f9bc300701ac6c2f920d7e23188ed6798cf47f0df850f40a471cc8840ecbaf7834bb5b78b3ace2bd0a5e9dee5fafda8d73388671abe30574ff6e0478e3d1138d50289cd8254129a9cc3a7ac758428d73cf58ed848abb192c70b842809b141b4e82a899bcbd4d281f15443287bc3eec2330367688da43f24e30f3ad10f435508b461608b18d3baead359c35dd61d29ff574a100686c8b4521a82a10588cc11c91ff18bcf20b6c1cdfc323b09f33d00972b0a447ddd2a1d95c32efcc9d2624200aa3b049f382e8a987a76fab5bdd808988a7c5a2dc939f2b34fba7db71848b1caa6a20424f2136bc5d0f8c04639fc818ce2ad94bfc072891451675c6566cd668b6ae5eff71a1ff5ecf5769870c182b31c0f79e31e044eec7f9feea416e410b")
	u_d := "fa3b3da7215464536106ab8018e637ac3b27bd506bb9ebabe411b580e90f88f714fc3a734c1629e6db407f9c627f942f80a99bde05332eb5132ab4436a721b3a37b03cc647cab4b65e678c5a73908b2346123200f3976f3e2c2ebdd98dee39cb53065bb1c6a29cc0301410a9d0085b7497a30aa0ceed3c00f9da9bc2761ca2e31ec23625b8060b9f647225065805169082dcb11ca6a8fc323e19da0b68d4a725811e5e68afb5562c19ab4fcee27814f4097331b3cca3c2b8dabed5ba91db02000caa01284950b9131c6808011c3a707447028365723b851469b1c60222af4b4c6a9b5707789431fe20a2dc837841d4985118902eec43f05b2c216c9689f43a3a9b712eb01feab0121408ce2b95236f2513b7f5a098ab5a5daa6792633c4dda723281c6008477c85613c0e48599447759299366664c9d39327e77c17cc93b646309e7f07a6250076b2494661602cdb0364cd1bf333a0bb20bb43b918a629096811a4561133576914b40da012fd28054b36092007ed4495b55f52f0b711ceb1968549371e9532f92b0b876653fccc32213c77d14f86dbc5b6bad79a9b58b7937c414a54774f63b8ce4a127244469f4ac4e4a23ba1d977073014ed8926468c870c9275559a2276b139c658494261785903965e4914896440e6606987ae290cc43022851bbd8724da2c7ba9f506d754475dd401148357f57c36432f1135daa42e03798684028b55abbd5226353ba5182882c6d06cbd6074048e0c2cfb305ed68263ae3919f488e39d2002b85accb724355752ac5367fea5c2cda8485e1650a4eb82dc68b37073c64ac5b2ddc0a4be145c3a938b058b0c6f2d25a8520bb538a94e86549ca649762c415a3397f85004e85eb2bbd29bbc142b79bfa2036a6b5e0447705fa9f148c4654d34054dbce32562c6666afa9407681567b44c31451e00fce2146c3ec37133b32f6635768b413bf5b54a3a941a741c3fd9315bd74b465301966c61496fc087da62653c215cf07cb73112b784bce273c70065bba05a267dee5cf64bb791d3b674fe90f55f4ade8a575c7c949c9ab813d273992e8909c0400d57a9a972a1442d11b10683f6f91a3cb12a99fbc84f04781368211198bc4ef1604f1e50f783c8d685c623aa7c151e35e08c2152a4bb72d030d92b08363460e4af39691163502d60bfbf9aed9f3a1bdb4c54bc4ba18267971774f89854454d38ed51a6bf06b3c9e32b325f1552b69b1ac3c1978579f6655873f3925d677a6ab421e2ab404b7610c0fa60d29a240e357b9ad297b5d624956b23794166899785081872ef5028d102c9f89c13cb4a5ce4d5361491a51bd9989d393577437c0d3242d4713c2a9347e627c2757139c1169261bb5b63387134ed87f87b2c6dda4687183c6e1899fa3e16bee39cd817b2a218c6c743a8c1f968b18d67fc6ccc769357376e1500f3a8b224634e40c5a0d202da21310ca216cb7f5afb953785b38a63d276107e5358bcbc807d5c02ef89538c5236c61230d607e024ab775f088f1a1b2c8b220a5133536ca6de4289f4a072730f76d62153793e903673a8d34704d4a3371641769f5097340d7b1e5da7eed3318bcd3811ce31221805420fb47c2968889e06880429d"
	v_d := "c1090dd01075311cc381060dc1198fa011c3f10800c1094ec1090d311ca970129c70021a00108f311c757002270010a9510700a0015b00108f401382b00534911aa9a011a9d010825117a9c10941a00127311cb6c1199c911a75e0041a40031a00001a21080070128200108f5107347012c3a011688116b6511782b01568b01582310c4ef11882f10841911aa9001068511768811668b0158210149ca01182c119a9701275311c75f1081a400327f118c3b01582f118a9d0005b401368f11868c1090d21188221084e00001aa00134310c34d0001ae00427c1198f910a41310c00c1196840030070024e311c7581169c81060d611b9c21081a5117a9f10834c119c3b0050081061ad01075100434e0040d10045be0149ce00441c1094ee014a981064ee0148f611b82610b41311cc3d0005bd01082311cc3610b41311c9cb0054151074eb01568c1090081060df1081ad0002700109cb015c3611b75d000270010b6400334611bb6b0159c5117c3611bc32118b6d00034610b4ed00034f10800"

	testWithTestVectors(t, kemName, ek, dk, c, K, c1, c2, compress_u_0, compress_v, u_d, v_d)
}

func TestWithTestVectors1024(t *testing.T) {
	// Test vectors from https://github.com/C2SP/CCTV/blob/main/ML-KEM/intermediate/ML-KEM-1024.txt
	kemName := "ML-KEM-1024"
	ek := fromHex(t, "ed859032bbb74c7412a7271c8ef23a5a08c31551a2a5cb8ada78538ce6c96d11625cb45e87b133163b16a4705aba1514f006afccbccf3c5c05acbc4563771bb8508072745d0ba56f57566181c3073b6c2b0dda50a2a83e74c67bcd48c0820b809d03a6ae4193dbd3bc06d072d2c64fd1e0b408a9c29818cd2df7790f9779536b0a076b4fb57b56f8cbb8ea3290c2f8b381c993d9eb49d8b4873ec660895528ab9ac306a66ae8209e2db9b79cb89220fab9d5cbb290ac690c79199218229aa8276393a73c826459429baed8365b88733871450e9523959c3f28691a3a0622e923259d2c90a61ca1525caf75a3a4292036957a5966d55840927234e1c5445b6685396890e3ccb9869147e63ce0b23defbb1c00f46df3819dd4a5756a355f61c1793b25a9b713c3abd12605198083773cf26909ffc92cd423cd290ba1801c694e7c80d6e2c9c1b943c69a5e7387ade187b21bd2a598c49ec772cde74656f1b43fa21021bcb86db8f91e03522bb4a76823483033f68659b57fa972c42673795b9a5dafa229fd8818f940a1b38a925cf06af712332b789a6f64ce91c7010af8a531101de8541a3ba4b4b893bfe7e791e693a5987a3d2d7224aeb213c5aba14aa0686efbbf31258d37122c304151916a9291181ffe788864f52acf001d788a3d80e4ad14623e9c402090b73fae5cb4225802cc4ab9c323c8cb914231c31c14c12a20ab7b5df5b6815bc04d991a32b6ccd229cf9692bf2e549ceb66512be58afe284b1d4990e46b5bafcca72589024e0b710169445e793cbbda9ca2664882199a54c31484d9364c2545876758999027c8f6423fa1a9ea810731092ca41c2451f29452c24d1d120517e06eaac91a77a47dec3c036ff84bfda92bcb396a36a75007014c0b6882a939b7e2c109c6046c04e9c1e4b1bd83444cf7838ca909946b512cb8d06ed3ab66a62071eb439632cccbced23c06c3456cdabf321328a17263e6aa3fee0028bef312cc99477ac71c53909740502e340b7cc06111eeb90bb08c58bfb97d78acbb10e7240ee5672062783636565c1744217787ffa33287f5075464b97707aec6864b38c918e0ebaf40fc9aac6128db4863a40c80b9d23261344a370c7b2dcb76e38623e5443242bcce9fb872b4c589b886aeb9fc79347cbf216b6ea8d1c7f5c5802fa24d1e68a4dc161699f90681069898e41d34a82cced119189b6547587972c4b17851a292f728f638a90164b97416c5b5b9231f1c675cf12c8ec1ce4866673f61addf98950263680efb56124b5936862f5328a3de923c4b2435b543ceee3b9761b5515aaaaecbdbb9cf8202090c82a2e5301fd0aee4fa4b39b0302d1813ab87cc1ba15595c36ef953401a92b8a88465c29ca4062626bc45b2a762c4ed957e53551827322351701db42c73e340566a476f559ac776283816da810c76af10f41482577544302e80eb6ab2fb720c2a950464c62970a450e65983c336dde77039722c614143a2b72c40256cf2142365ebaf288b0d9d69b56671b45f72c90a26ad50229d8fd6291ae6306d614aba34b65af02fa7cc2f5d7c5c8f4b30dc715f65f82c6320088fe0cfd4f05dc63a22ffeb0f38f68c5e08af5603c605007c9efc1f1574c94d322191f248cf34246d9bb06c650e85a8ce1832860689af7791054bd01b79a11cc41ca05f3a174d9393191bc541678989b0a6fbea82c488aa828b077003a69b335098d00616e28d7853ab98b54c0b99840ff94393532285ccbc003120cd8b77c5c18d0e654750893de5c071a60a152350cc537a34a60c7032c21623c1bd0ce38046b986e786051e9891a7784223b45cc09682dbfacd92776f594377d07290667a81726c7a62ab1e883329b22205b3e72165c846261429dd3cccedd4933bb38f4b9000a066c2464844ab47899269033078c1f2473e564a2c697caeded4cda82b8516c287b23a84ee997fe9206874f73d130a73d5a14e10668365089a9695b7870806fa8431663120eac9b9133937117cb3bcf862e306747139253f181deb0352e6bb6b888561d46b3406fa31ec08520b275bacb6b1fd1bc40076958ed1bf96b70c5f567c9f83a3abdcc85e81aa0f99a50c2aac18a4177aa0bd1d7caaabb11e09a3bc211685396750a4723c8c8334433019c1844c9aa22b6e6995bc703ddb09edbe4f1a61a62a23531cf707976a861efef13e8347210d77f3d080e9ba89")
	dk := fromHex(t, "82b25c61f7099f870f988428ad662203f75c638390c593035b3aa1a91092b2d276fddb56bcab637e00a26ee68058376ad13c0e5d7b31ed29b2c24710b47b60246214bf308f8dd77379590842740c84ab6d8adc71a1cb22c4e98e58112d803998a104bd606cb439e0b686384148a209f5d171e4b63e29f66863aacba2c5a489600dfb64b65ce21f848b4c7621c6a3e65792497d1354a72e22405057cf9330332b419ca396cf69d374df850a2481c943488ab45cb71c992e12034baa94272a32cc694294ab6867d4f8758f972520ec5f90159fda33ad91d893273ac9a3e35f2976bbff525a2de84cbc55acbca91fa9ea91700abb87323d2a67c95d62cad3dc534aa83ff3fb6837ea908f0b953ca88bfb01b62068a1ade3c19e7b153f8b34b19295e054334f59b73855c030e597b688c3d2a14a336a2929393e0b27171315805e5cc3053b6d90843d82b933c1cc1574c18d9dda933f3b33b8cb7bf7143f6f595b1ec7113fd46f629930f28c4d4f666ce24bccd8bca5d74488de3b2480b176c0eb6f9dd19434ec33563303fcf7cdbe09c55d4216ad524379e451e74a2121c442c4412de5e137ed18421e07779b598860cc2e4e42c10f58a01617936c4548453183739c5624c68915b79a25a90257b1437a1583a9107d7d0587bee15570f3c008b9140f779cdce06fba05ac57991020162bb2096911594109f9032a09007eea48e1b5b5e11c9643d75284256c5a73b935668abb12aeeab7b040f71e17a74235e166d1942f7caa890869ccb1184cd44a9e82a89f31e83602e21de2b5cacfc254282470e0c66b020a5b058043e9135ab06c4fe1329d7a280ba6dc3de017c1041a26cf3b10d305c73594c469ac11b091bcb20412dfdc3ef0b712aee31fc2a81bfbd9990ca296fe45bcb992ba92d4148591a2f80990f218a2991bb3f3098a36c6568db8a40ab03b9e017305d893b48285a5178ee6b80dd2c5555837c3e976afd36b895c10acb438ca7009ad7723b31b3aa6a680156ec3cfe4e813dbf010e6e5b39a890b76984d20e965c5a39a6cda801ec55c55245abe3b946bda7c8e70c99ac62e2ca2c2ce165722d710a1c443a6467f91c63ed53c3f223580fbd058b6c8b4f134ae3b490ae97466e1983b0e669b22615df1732df9e9a98d4575720571ffa60dc888a65f6644902a9ad89a93c4b22132515d808ca445bab49e3276caa8a48d272b823477a0bc151491c229ab38bd6a4485257374cbcd03d6a6c655b6a1d06751995fa1c394116476f399673b5b40857cb9c68721168a936d89a3008923b81c2d7eb94ba63c3eff45b4ccb48a9d2142e8d5238ce904376bcd1e088b864a6a5acab75b138b9be44b08f00825bc3a804835337cac36bc41ca8bab90384a51341875c7ad27d109afa36e2965cafe1922811762a077af789b8d6c490c0f102b62869ca38a83effb05f14ac82346645de63cb60bba30b665a3f1c9f842952aea89fe630f6404b63164a39692180d806d65da3c1be076ae77b42d665edd2b93c1210427909d294a2fbad460444032a727960210005b7b3ad367cc300738187b3c64bbc00b16257f09182537129b14bf94c482bfdb9b82634821862a7fb0234ae0b5685582de054cb5575e9f8464336609cbd7ad5b486117ac4ea2468be9147e8c96b3a07993d5725f85c31c79405541c2c13b3abdc55b2dfa2ab02842a711a2b877097769c22be065622ab0a92d5108bfa10c644935ee4652efca95fafca3b5cccf0187a45708cf68838ffa79427a0400f8439f15b11e064b2b777c0715aa8a91c96ea7f1a851f47f8f077514a36c901059892273ca8695b3b418c8187558d18f1b9153d6c0b966e08f9a675889aa519224cdc4fc1fee51082ec26cea593124435f4bf95b3d852ad9554953088aae602e0ad3023d17576123929b1150fa496b850ab4e5f372ab7188f3127d2dcb970df56c4f5a2548903bd5ec50fb9196cf2374d7cc728243757743083d4a93c4b6adca54314a3200fe5a303aba4c07d4cf3eb632eca5b353190decd984395192d1f63d3d9291e00aa17e0872df27a405832d0a7b43115b05e6a4cb9293812ab26eb2e148e4b5082ba99039d6847a03be1693afc09a3ab95044107586e0db02720145c84cc800b669c51c8a96e526c4a99970234409414ed623cced859032bbb74c7412a7271c8ef23a5a08c31551a2a5cb8ada78538ce6c96d11625cb45e87b133163b16a4705aba1514f006afccbccf3c5c05acbc4563771bb8508072745d0ba56f57566181c3073b6c2b0dda50a2a83e74c67bcd48c0820b809d03a6ae4193dbd3bc06d072d2c64fd1e0b408a9c29818cd2df7790f9779536b0a076b4fb57b56f8cbb8ea3290c2f8b381c993d9eb49d8b4873ec660895528ab9ac306a66ae8209e2db9b79cb89220fab9d5cbb290ac690c79199218229aa8276393a73c826459429baed8365b88733871450e9523959c3f28691a3a0622e923259d2c90a61ca1525caf75a3a4292036957a5966d55840927234e1c5445b6685396890e3ccb9869147e63ce0b23defbb1c00f46df3819dd4a5756a355f61c1793b25a9b713c3abd12605198083773cf26909ffc92cd423cd290ba1801c694e7c80d6e2c9c1b943c69a5e7387ade187b21bd2a598c49ec772cde74656f1b43fa21021bcb86db8f91e03522bb4a76823483033f68659b57fa972c42673795b9a5dafa229fd8818f940a1b38a925cf06af712332b789a6f64ce91c7010af8a531101de8541a3ba4b4b893bfe7e791e693a5987a3d2d7224aeb213c5aba14aa0686efbbf31258d37122c304151916a9291181ffe788864f52acf001d788a3d80e4ad14623e9c402090b73fae5cb4225802cc4ab9c323c8cb914231c31c14c12a20ab7b5df5b6815bc04d991a32b6ccd229cf9692bf2e549ceb66512be58afe284b1d4990e46b5bafcca72589024e0b710169445e793cbbda9ca2664882199a54c31484d9364c2545876758999027c8f6423fa1a9ea810731092ca41c2451f29452c24d1d120517e06eaac91a77a47dec3c036ff84bfda92bcb396a36a75007014c0b6882a939b7e2c109c6046c04e9c1e4b1bd83444cf7838ca909946b512cb8d06ed3ab66a62071eb439632cccbced23c06c3456cdabf321328a17263e6aa3fee0028bef312cc99477ac71c53909740502e340b7cc06111eeb90bb08c58bfb97d78acbb10e7240ee5672062783636565c1744217787ffa33287f5075464b97707aec6864b38c918e0ebaf40fc9aac6128db4863a40c80b9d23261344a370c7b2dcb76e38623e5443242bcce9fb872b4c589b886aeb9fc79347cbf216b6ea8d1c7f5c5802fa24d1e68a4dc161699f90681069898e41d34a82cced119189b6547587972c4b17851a292f728f638a90164b97416c5b5b9231f1c675cf12c8ec1ce4866673f61addf98950263680efb56124b5936862f5328a3de923c4b2435b543ceee3b9761b5515aaaaecbdbb9cf8202090c82a2e5301fd0aee4fa4b39b0302d1813ab87cc1ba15595c36ef953401a92b8a88465c29ca4062626bc45b2a762c4ed957e53551827322351701db42c73e340566a476f559ac776283816da810c76af10f41482577544302e80eb6ab2fb720c2a950464c62970a450e65983c336dde77039722c614143a2b72c40256cf2142365ebaf288b0d9d69b56671b45f72c90a26ad50229d8fd6291ae6306d614aba34b65af02fa7cc2f5d7c5c8f4b30dc715f65f82c6320088fe0cfd4f05dc63a22ffeb0f38f68c5e08af5603c605007c9efc1f1574c94d322191f248cf34246d9bb06c650e85a8ce1832860689af7791054bd01b79a11cc41ca05f3a174d9393191bc541678989b0a6fbea82c488aa828b077003a69b335098d00616e28d7853ab98b54c0b99840ff94393532285ccbc003120cd8b77c5c18d0e654750893de5c071a60a152350cc537a34a60c7032c21623c1bd0ce38046b986e786051e9891a7784223b45cc09682dbfacd92776f594377d07290667a81726c7a62ab1e883329b22205b3e72165c846261429dd3cccedd4933bb38f4b9000a066c2464844ab47899269033078c1f2473e564a2c697caeded4cda82b8516c287b23a84ee997fe9206874f73d130a73d5a14e10668365089a9695b7870806fa8431663120eac9b9133937117cb3bcf862e306747139253f181deb0352e6bb6b888561d46b3406fa31ec08520b275bacb6b1fd1bc40076958ed1bf96b70c5f567c9f83a3abdcc85e81aa0f99a50c2aac18a4177aa0bd1d7caaabb11e09a3bc211685396750a4723c8c8334433019c1844c9aa22b6e6995bc703ddb09edbe4f1a61a62a23531cf707976a861efef13e8347210d77f3d080e9ba89fa12bd4f75caa74f23b4af606902f6187dd9be62a43b1b529344f1114e69391d5f574ef7f013d4336801fed022178c3ed91d0b6d51325315fc1dcabf4770a2ea")
	K := fromHex(t, "6c4f4a231255a8cdfb7424c8dabf3a624cefaffd28964efe220ab6178fa6b324")
	compress_u_0 := []uint16{1415, 759, 1924, 643, 1597, 759, 479, 1571, 605, 190, 253, 898, 1934, 1950, 812, 532, 1117, 1076, 1877, 917, 1070, 942, 1981, 1617, 146, 501, 1665, 1978, 1922, 1408, 1432, 477, 1783, 1950, 1737, 320, 1084, 322, 1019, 829, 1454, 1813, 1561, 69, 658, 1965, 1456, 986, 50, 1071, 268, 103, 1552, 724, 1257, 1419, 480, 610, 1473, 1431, 696, 559, 1748, 1297, 842, 1767, 501, 989, 1800, 589, 950, 1201, 1291, 1390, 1058, 1957, 754, 680, 1255, 346, 1600, 1314, 1970, 1215, 1182, 1178, 358, 1157, 1404, 400, 1153, 508, 1705, 511, 189, 233, 118, 1745, 647, 836, 636, 1559, 1341, 1724, 623, 1004, 1591, 1818, 288, 64, 1418, 30, 1679, 1422, 582, 616, 28, 671, 1704, 253, 164, 953, 1291, 628, 1407, 1127, 1770, 1233, 1106, 564, 711, 1170, 1569, 816, 283, 1811, 651, 1484, 1106, 462, 1246, 1324, 119, 1244, 1124, 840, 992, 559, 1232, 1810, 1490, 1496, 319, 749, 179, 1911, 1685, 260, 984, 1181, 18, 1844, 412, 1144, 715, 1892, 82, 1040, 135, 1574, 510, 1711, 699, 910, 1115, 114, 15, 1560, 46, 255, 1272, 2002, 937, 615, 835, 1, 1222, 1412, 1711, 896, 849, 1786, 869, 978, 1628, 546, 693, 1376, 1098, 789, 1806, 311, 418, 1569, 1606, 586, 1302, 204, 1273, 1819, 1106, 508, 44, 1576, 1561, 1491, 755, 1000, 551, 1809, 493, 581, 1703, 1972, 420, 1570, 1292, 656, 369, 437, 1886, 138, 1192, 1646, 1831, 133, 1855, 1662, 1676, 752, 51, 1705, 1376, 561, 1454, 1054, 65, 59, 1646, 1449, 368, 109, 497, 455, 412, 639}
	c1 := fromHex(t, "87bd17e107d5e37b7d67c45df2453f04e778cfb38c425da461d52be742d7f53eca92a84fa0752f78c062b63bf7f67cb281c243a1ecaf67aead78868b20a9d6c3567b32782143ce00616aa573b1e01153702f8bab17513ba24a3b777dba87f026d92e960b75ab084b2f2f549d532b4016a9ec7fe9494d9aa5907c854c20f993eafff4221d7688f6a188c6a70bf794d76f62df8d350e122028d6038f76ac91d0c4814fa1ba1fa4c8dd42e9f4d733aa3b9a52a4d1b1241962986d64e28b62ae149de34d96de819b64441af85e044d894b17bb3f69d72cee5e698260af9312a03967f0b82cb24b01828730b17f5ebd2bc76d510e0fc0b00bfe814fe9a7ee4c430b803109fb6ac0454ddf65931e9745542bb02ab1620ebf8968426c6425599419f9dcb814f9c302146778baf342df8922de9e229d9af6a4113143211597da785d11a874f3c90bf1733f331a5e3348355863e45a0f0661076e4e2d5cda109fe370e64fedfaeee5d3ea0131d7b8bf3a6344abf7dcc77699f4325c6f0e9aaa8b4bfae413e22c5ea945b5d59b417c733780d03069f169be61813c15391f2dd1619cd93357ceadf8688e97b37e162a19335e3e17c676e540a0646a50f0c88357dad7e868ac1570e0ec068bce9b87e1de6c3e03098f77ee87854d97e20cf9e1bc15d9ce1833814a9f15667d8f61396bfdaf0132211ba1e639f65a4a7735e6edf3b6355f586e7434a5ffba59f7790c091c806debd0921d64d3360cf8eb42aa6238924865dbe79b50552317752633b44e1f64ebeab992225c395010a91d0966ca3b5356d2023489c38fbab20582a6cf6ba5d946e97a090da7496f8ab2e197f3a2113893980d6c48bcf834536b255ff6520350638e563b049ade5243a6c7210e56d8873f96ad5a2a8d527d4598255b7f5d5d663e8e18917f2ffa7fca37a5e0917c8a2343446b3587345ca13c78c29e813455744b8037a3c6da691087f9cd3b3bb64b948eba4eddf7d0dbcff1d31b2759e0c82d36b56e3ea3c0d21fe7d19855ff5632cdeeea2c78a5bdea96263445c653e4a12447d4c1200240ad537875571d4bf88dcc40b35437942b85aedeb211969551a9ff863704d6d9f097858ff2da1d3525aeb656a908819d0438ebb16eb81b10087f3c0d9c036a59bf3ee15579f85f1ecb16ecbf807167548635401ab6c1ca6c1edb6eed3c1efe0d2eaad683ccbfc89aa7c4dea656983cc0b959445f92c596011667e83528a964ba4a067991e745372bc05792958ed2f776b57ec98f8181e2caf7b542999c04dea5075247e70fa43ceae837fc9b3a9354668309cfbffe0194937c7064e03ad6c756c5b3e4bb0c514018d31b7084db418f105b48ba93b86095591df4157aaa82f9c186e54181e6966751ce26a6f8357b61000944218bc69c309f720a35cff5dfd27bad2197000c3f9ccb97bd00049a4a66bbc18105026430fab2aac0713534473cf1f46cf92d31f3129eeb95772f2c3ad5590210a3fcbd6603cd7420fca5fb5516629edf73d86ef03899f279d3b8f1962a71dc0d3702cb164bacac3414e9f4736992ac8fe2afeffeca9d6dfb0af61901adf9b210afcb2a1e990cd9bbba5b90ed1e230f9e39b1888ccd8fd9e1b5c37bfbf802fd6d90adfa632ec26f90cd0f4d7ab3859ef964d726851c4d2b120d154c86ac60a05918a9b0381f4cdad739261d43ce4e79de1f4fbaf09cbb3dc329303bb03af964fbd45c0b1e801530293e39754ff36c5681395931b0bff4896cb3ece79c531c72597de5451a1c56448cc25d2aacc9f1404b6440f6eb10567b0965d8d18a0368ba4d1723359130fadc83f80848c23274e7cdfcaf97ee63750cb206e25caf8b0b8b2cf066c2ccd61d844873d912109e28ee334f71eeba2d3cdc31d93415e55e82362119f81cef055694d869bff6e0d70e1ed69834b9fd40768611e1d88be19bd77d946f4910c0564b1ce0ccf0e53a45b8f065d8ec2023f226f20928f351971d")
	compress_v := []uint16{30, 25, 7, 11, 10, 19, 9, 12, 15, 11, 10, 30, 21, 28, 19, 13, 1, 1, 28, 3, 29, 9, 24, 27, 14, 12, 0, 11, 12, 1, 24, 26, 21, 10, 15, 24, 29, 0, 21, 12, 2, 9, 28, 8, 14, 9, 20, 2, 22, 31, 15, 21, 3, 23, 9, 1, 6, 17, 20, 9, 24, 22, 2, 10, 11, 2, 15, 30, 4, 23, 26, 4, 25, 28, 22, 8, 22, 3, 5, 17, 2, 21, 24, 16, 30, 13, 31, 4, 0, 5, 13, 25, 17, 16, 0, 23, 1, 1, 5, 13, 29, 22, 19, 3, 12, 18, 21, 25, 26, 11, 22, 6, 27, 26, 0, 7, 30, 27, 19, 28, 24, 15, 25, 26, 22, 25, 24, 14, 31, 24, 18, 30, 14, 12, 30, 23, 21, 30, 3, 26, 17, 1, 28, 2, 11, 20, 26, 22, 5, 19, 15, 15, 1, 22, 26, 19, 23, 15, 27, 30, 7, 13, 19, 15, 22, 30, 4, 24, 15, 24, 24, 0, 9, 3, 4, 6, 29, 7, 24, 4, 5, 16, 19, 30, 30, 14, 27, 25, 27, 16, 16, 27, 7, 20, 18, 5, 20, 10, 1, 8, 7, 2, 11, 17, 23, 13, 15, 20, 10, 5, 19, 20, 12, 23, 18, 2, 5, 23, 26, 13, 30, 0, 27, 27, 23, 14, 6, 25, 0, 26, 14, 9, 18, 11, 14, 3, 7, 18, 3, 7, 2, 20, 12, 6, 25, 3, 1, 17, 9, 28, 21, 8, 4, 21, 21, 14}
	c2 := fromHex(t, "3e9fa566626f295ff96c21f0d113de8e81c502d6553ddc41652271e41215f6bf3a6e0a26d284ad504b3c4fae26995b644789a262e8db27a0b41c21b82194d6ed1c4cd6ac97355b83e3f7e4f8656d33761f4bef98bfd50f1d03178b6a5be67bc1ea79dff6a7cd673dc10f63900631fd6052e0f4deedbc21dc87ca42554047ac78dba3aa4ccaae14e5eae6c1ded7990cb44b72b971e43882329347888957446a75")
	c := fromHex(t, "87bd17e107d5e37b7d67c45df2453f04e778cfb38c425da461d52be742d7f53eca92a84fa0752f78c062b63bf7f67cb281c243a1ecaf67aead78868b20a9d6c3567b32782143ce00616aa573b1e01153702f8bab17513ba24a3b777dba87f026d92e960b75ab084b2f2f549d532b4016a9ec7fe9494d9aa5907c854c20f993eafff4221d7688f6a188c6a70bf794d76f62df8d350e122028d6038f76ac91d0c4814fa1ba1fa4c8dd42e9f4d733aa3b9a52a4d1b1241962986d64e28b62ae149de34d96de819b64441af85e044d894b17bb3f69d72cee5e698260af9312a03967f0b82cb24b01828730b17f5ebd2bc76d510e0fc0b00bfe814fe9a7ee4c430b803109fb6ac0454ddf65931e9745542bb02ab1620ebf8968426c6425599419f9dcb814f9c302146778baf342df8922de9e229d9af6a4113143211597da785d11a874f3c90bf1733f331a5e3348355863e45a0f0661076e4e2d5cda109fe370e64fedfaeee5d3ea0131d7b8bf3a6344abf7dcc77699f4325c6f0e9aaa8b4bfae413e22c5ea945b5d59b417c733780d03069f169be61813c15391f2dd1619cd93357ceadf8688e97b37e162a19335e3e17c676e540a0646a50f0c88357dad7e868ac1570e0ec068bce9b87e1de6c3e03098f77ee87854d97e20cf9e1bc15d9ce1833814a9f15667d8f61396bfdaf0132211ba1e639f65a4a7735e6edf3b6355f586e7434a5ffba59f7790c091c806debd0921d64d3360cf8eb42aa6238924865dbe79b50552317752633b44e1f64ebeab992225c395010a91d0966ca3b5356d2023489c38fbab20582a6cf6ba5d946e97a090da7496f8ab2e197f3a2113893980d6c48bcf834536b255ff6520350638e563b049ade5243a6c7210e56d8873f96ad5a2a8d527d4598255b7f5d5d663e8e18917f2ffa7fca37a5e0917c8a2343446b3587345ca13c78c29e813455744b8037a3c6da691087f9cd3b3bb64b948eba4eddf7d0dbcff1d31b2759e0c82d36b56e3ea3c0d21fe7d19855ff5632cdeeea2c78a5bdea96263445c653e4a12447d4c1200240ad537875571d4bf88dcc40b35437942b85aedeb211969551a9ff863704d6d9f097858ff2da1d3525aeb656a908819d0438ebb16eb81b10087f3c0d9c036a59bf3ee15579f85f1ecb16ecbf807167548635401ab6c1ca6c1edb6eed3c1efe0d2eaad683ccbfc89aa7c4dea656983cc0b959445f92c596011667e83528a964ba4a067991e745372bc05792958ed2f776b57ec98f8181e2caf7b542999c04dea5075247e70fa43ceae837fc9b3a9354668309cfbffe0194937c7064e03ad6c756c5b3e4bb0c514018d31b7084db418f105b48ba93b86095591df4157aaa82f9c186e54181e6966751ce26a6f8357b61000944218bc69c309f720a35cff5dfd27bad2197000c3f9ccb97bd00049a4a66bbc18105026430fab2aac0713534473cf1f46cf92d31f3129eeb95772f2c3ad5590210a3fcbd6603cd7420fca5fb5516629edf73d86ef03899f279d3b8f1962a71dc0d3702cb164bacac3414e9f4736992ac8fe2afeffeca9d6dfb0af61901adf9b210afcb2a1e990cd9bbba5b90ed1e230f9e39b1888ccd8fd9e1b5c37bfbf802fd6d90adfa632ec26f90cd0f4d7ab3859ef964d726851c4d2b120d154c86ac60a05918a9b0381f4cdad739261d43ce4e79de1f4fbaf09cbb3dc329303bb03af964fbd45c0b1e801530293e39754ff36c5681395931b0bff4896cb3ece79c531c72597de5451a1c56448cc25d2aacc9f1404b6440f6eb10567b0965d8d18a0368ba4d1723359130fadc83f80848c23274e7cdfcaf97ee63750cb206e25caf8b0b8b2cf066c2ccd61d844873d912109e28ee334f71eeba2d3cdc31d93415e55e82362119f81cef055694d869bff6e0d70e1ed69834b9fd40768611e1d88be19bd77d946f4910c0564b1ce0ccf0e53a45b8f065d8ec2023f226f20928f351971d3e9fa566626f295ff96c21f0d113de8e81c502d6553ddc41652271e41215f6bf3a6e0a26d284ad504b3c4fae26995b644789a262e8db27a0b41c21b82194d6ed1c4cd6ac97355b83e3f7e4f8656d33761f4bef98bfd50f1d03178b6a5be67bc1ea79dff6a7cd673dc10f63900631fd6052e0f4deedbc21dc87ca42554047ac78dba3aa4ccaae14e5eae6c1ded7990cb44b72b971e43882329347888957446a75")
	u_d := "fc284d375c41242a4d0ba39fd753139b415b482cc628153618576deb3b5dcbb65f944ca4ede03292fac8341c8f187930522bc6078b20e2b6207846543b39b8e909072ea4c73f396451d06cb4710adb9949fb37900c033e5a69916bd43819cb835985b32e83646edb3b08067a33388db8d6c6ca1445f82723298a85827c7b81b777469275eaa82852a733d3fa3333b117c040b11cf4540a649e8428aff503661abab8d48106011903a97a90b2933e2e3044d2ba190bd16033d83fef88723d4b7d06573984e476f6e952cc01b822c49606f72ee98786c1607e2357554cd638d3e7b776099807124c2321c2b37a1a3f06781d50bb9e42748a34c085b069dbf09f3dd3ad70745c14970b18809e4be0191468cbf3853e4d2500c2778fdd0a5b6475b5856563568a3766d48bf9365078ab1fa7629f339a3b44c81415d8b806a7334820a0e98997cb946580d3b721033bd05ac8ab829f34a84258622cfa0b0e9247a7a08b0dc7eba8a46a4c5330adbd08393b196b6a0006743a9356120b28432e9ef240c1b49856bc8c3100a617ca9b3f450eda9aa84c174c5e6829f6db2ee9b397acd73215b8b7087a8644384ad3520deb072dd0b09e2b498156d647953b11beab92cffba01989a6d3358d93d12e5a2abf48923cc2874cc6bb1385990b47737cab46c325664c0cec72a8fa568966b640cb23bfeb62e8392d5d9c02708bb48edc47e0b7863b65caeea746838572304582b68c11c65832fae891bdbc5751f71acc917d77918e8d374c8552c14c9bae6a82bad39b3edcec97f26bbcd0769c0250b2df4677b0063f64a168f79a7514d12ded307912cc9a2f58ad66195f1eb5a97f9835e9ba639b171c36c234ea96b1ecc07c4a9b43cc2309d3f72d9af18d50b2696f5c8eb30a59b1ea4c4cc587d8db21096b66be1b55c7997718298fd6917161f5ac32524dd0c40a8918bbca080c92dab466657c92bbb7bdf8c7cf0c7a59b4899533ad0ee752077b67b8a87c95416fbcf1b5a3fa67a9ec78346ca30f41a3ba3157b7bbaad738a4367c8fa7b02a0b3725c2c9292d7760abc66db569c28051980f0285fbd5b391715ac73b33d3f23b2440a30afaacce322a91d6c6e492aa18d9cd3492ab40ab2fd3798673744afab04323f710c5c01df4e605d5200099f410b908471005b79a630a3535ad36682399ba630bdb4e319244ddac6dda8647883567913085f23a1877f895a36479e0404ee0812d1ec3972e5b01d2d01961d57e45a352db2410b99818fe9c180b4b8fdf8413822a79be2834eb89052695bb40794ac18b18bda99551e431c6f726e22a88ff4a7e32c2a385b659c4714d0ef9490a205c9bea0ab9d3516f74149359621947a71050470e592fd98b5a6eb54d6a4669126423cb2c2391d21f33bc864cc31760cc3429962fb7f9cc3c843e25322cf720c67d8c01d1e5c4da1205fb85c74059a0a3a7c2d2160477f2c68a966b049331eca66ceb051e4b6079b168a98d408844b066be82ba0a327d553a12f5e76f03da2b6842013b7010215128c05681fa63acc27bcf6a284daed07a81f6cc775a65412600929a3c869505cc391a29da71b5b78ad8c2add3a79f80bb31555a2530953d84ea4c269c09a33aadd1033424e4b56faa3474581abad9c12e221b1673c9ee095a860152a92c2dc625994cf45b86e9b28e5658a0f722676810fbe7a8ac72a39611ca5e26cf69499462964ea342346f6a917beb251691764721c8dc7a4a0b896464c7b6d9f5231805a789026e1eeb988a8c9ac95b590bb9be89621c5a4b516b963ea7851287aa40e0d83b979b3e86732a89e05185a4136aba131351b8cae085ecb873d87b36104bba269cc4ebe530381b32dd929c80018b507cb085684bd359008c807750a63f48b6c5704a04f68711e5f4260b3458a3c7817c3aa0972b463bd238abd647bc2121869908ee83c448f575a2919bb781add91352ff2223175087e4c7a096f8758e335e59a37451778f3418bccef79bd92333ed8b6ab8b2b7f6eb25cb16a364eb7c2e95aeb0a61b6e0925a22120c1352a21f2963f5b9e5e193e78381135ab07e3b77633dca168e245f11088db840ced086bfc287cf5a1c8a50154c7b12dd044b75dfcc844aa7aa7118f9af416ed979ed6f543b7e564e979c014f5a2fc5081106465790918"
	v_d := "319ca2d8824710947ba8034e1886471014c38918b6b98754688006618b13c98b3ac199afb0054e008047e08406c119a989084118169cc90b0089084ed0803a610b34b0853a21080df198c9189688389195a8830670926e21883ac1198fd0004178040d1816c3a09195910a1a291ab6f10834f1881308926ed09088c11968318c54990c1a0080204895a2e91668009095688006088254c91b8fb98713e014758998a2918a47f10827f91aa900802d319cafb917b6c18961291aa9f198a2c1095b991c9c5117c3b0054e319c958918c33811a9e98606610b0d781482911a8f08927b18866168108f919a7b598961f91ac3d88254b98761f118c3a0119c18169cc10900a88313a00127c98b2dc1091a081268b917c3310c5bf99aa2f91a688196afd81282518720210841680034d8020d78946e598954181682108420b91782e0949551070d089295918a54310c00f99aaf59095b7092a20010a9b0853a518747b08513d8127538812dd01082e00427298a1368906ea813b6890834a0918889085b"

	testWithTestVectors(t, kemName, ek, dk, c, K, c1, c2, compress_u_0, compress_v, u_d, v_d)
}

func testWithTestVectors(t *testing.T,
	kemName string,
	ek, dk, ctxt, sharedSecret1, c1Known, c2Known []byte,
	comprU0Known, comprVKnown []uint16,
	uDecodedKnown, vDecodedKnown string,
) {
	kem := (kems.KeyEncapsulationMechanism)(oqs_wrapper.NewOqsWrapper(kemName))
	encoder := &KemeleonEncoder{}

	encoder.Init(kem)

	// Specific to Kemeleon: Check KEM output size
	if kem.LengthCiphertext() != encoder.kemCtxtLength {
		panic("Received invalid ciphertext size from KEM")
	}

	// KeyGen: Use ek, dk from test vectors
	keypair := kems.KeypairFromBytes(dk, ek, kem.LengthPrivateKey(), kem.LengthPublicKey())
	// No Encaps: Use K and c = c1 || c2 from test vectors

	// Decaps
	cd, err := cryptodata.New(ctxt, kem.LengthCiphertext())
	if err != nil {
		t.Fatal("cryptodata.New(ctxt) failed:", err)
	}
	sharedSecret2, err := kem.Decaps(keypair.Private(), kems.Ciphertext(cd))
	if err != nil {
		t.Fatal("kem.Decaps(sk, c) failed:", err)
	}
	if !bytes.Equal(sharedSecret1, sharedSecret2.Bytes()) {
		t.Fatalf("test vector on sharedSecret: expected %x, actual: %x", sharedSecret1, sharedSecret2.Bytes())
	}

	// Now that we checked that OQS can handle this test, we can dissect the bytestrings into components using our code

	// splitCtxt
	c1, c2 := encoder.splitCtxt(ctxt)
	if len(c1)+len(c2) != len(ctxt) {
		t.Fatalf("splitCtxt(ctxt) was not proper: len(c1)=%d, len(c2)=%d, len(ctxt)=%d", len(c1), len(c2), len(ctxt))
	}
	if !bytes.Equal(c1Known, c1) {
		t.Fatalf("test vector on c1: expected %x, actual: %x", c1Known, c1)
	}
	if !bytes.Equal(c2Known, c2) {
		t.Fatalf("test vector on c2: expected %x, actual: %x", c2Known, c2)
	}

	// decodeBytes
	comprU, comprV := encoder.decodeBytes(c1, c2)
	// test vector only considers first 256 integers for compress(u)
	if !slices.Equal(comprU0Known, comprU[:256]) {
		t.Fatalf("test vector on compress(u): expected %v, actual: %v", comprU0Known, comprU[:256])
	}
	if !slices.Equal(comprVKnown, comprV) {
		t.Fatalf("test vector on compress(v): expected %v, actual: %v", comprVKnown, comprV)
	}

	// decompress
	u, v := encoder.decompress(comprU, comprV)
	// hex string in test vectors uses full 12-bit representation
	uSerialized := make([]byte, 0, len(u)*2)
	for i := range encoder.k {
		var block [256]uint16 = [256]uint16(u[i*256 : (i+1)*256])
		uSerialized = append(uSerialized, encoder.byteEncodeSingle(12, block)...)
	}
	u_hex := hex.EncodeToString(uSerialized)
	v_hex := hex.EncodeToString(encoder.byteEncodeSingle(12, [256]uint16(v)))

	// cannot compare with the original values of u,v as those were captured during Encaps and often decompress(compress(x)) != x.
	if uDecodedKnown != u_hex {
		t.Fatalf("test vector on u^d: expected %v, actual: %v", uDecodedKnown, u_hex)
	}
	if vDecodedKnown != v_hex {
		t.Fatalf("test vector on v^d: expected %v, actual: %v", vDecodedKnown, v_hex)
	}

	// this time we should get back exactly the same ciphertext/intermediates, as compress(decompress(x)) = x always.

	// compress
	comprU, comprV = encoder.compress(u, v)
	if !slices.Equal(comprU0Known, comprU[:256]) {
		t.Fatalf("test vector on compress(u^d): expected %v, actual: %v", comprU0Known, comprU[:256])
	}
	if !slices.Equal(comprVKnown, comprV) {
		t.Fatalf("test vector on compress(v^d): expected %v, actual: %v", comprVKnown, comprV)
	}

	// encodeBytes
	c1, c2 = encoder.encodeBytes(comprU, comprV)
	if !bytes.Equal(c1Known, c1) {
		t.Fatalf("test vector on c1': expected %x, actual: %x", c1Known, c1)
	}
	if !bytes.Equal(c2Known, c2) {
		t.Fatalf("test vector on c2': expected %x, actual: %x", c2Known, c2)
	}

	// combineCtxt
	ctxt2 := encoder.combineCtxt(c1, c2)
	if !bytes.Equal(ctxt, ctxt2) {
		t.Fatalf("test vector on ctxt2: expected %x, actual: %x", ctxt, ctxt2)
	}
}

func TestCompress(t *testing.T) {
	// relevant values for du, dv for ML-KEM
	for _, d := range []int{4, 5, 10, 11} {
		t.Logf("Testing d=%d", d)

		// check that compress(decompress(y)) = y
		for y := range uint16(1 << d) {
			cd := compressSingle(decompressSingle(y, d), d)
			if cd != y {
				t.Fatalf("compression correctness violation: was %d, is %d", y, cd)
			}
		}
	}

	for _, d := range []int{10, 11} {
		t.Logf("Testing d=%d", d)
		// check that decompress(compress(x)) ~ x for large d
		for x := range q {
			dc := decompressSingle(compressSingle(x, d), d)
			change := int16(dc) - int16(x)
			if change < 0 {
				change = -change
			}
			if change > int16(q)/2 {
				change = int16(q) - change
			}
			if change > 2 {
				t.Fatalf("compression closeness violation: was %d, is %d", x, dc)
			}
		}

	}

	// Verify that simpler compression function is correct
	// Tests against compress(x,d) in crypto/internal/fips140/mlkem/field.go
	/* for _, d := range []int{4, 5, 10, 11} {
		t.Logf("Testing d=%d", d)
		for x := range q {
			x1 := compress(x, uint8(d)) // Insert implementation from crypto/internal/fips140/mlkem/field.go here
			x2 := compressSingle(x, d)
			t.Logf("Testing d=%d, x=%d, x1=%d, x2=%d", d, x, x1, x2)
			if x1 != x2 {
				panic(fmt.Sprintf("Error compressing. Original: %d, correct: %d, actual: %d", x, x1, x2))
			}
		}
	} */
}

func TestVectorEncode(t *testing.T) {
	// test various values of k, t
	for _, paramK := range []int{2, 3, 4} {
		for _, paramT := range []int{128, 192, 256} {
			var encoder KemeleonEncoder
			encoder.t = paramT
			encoder.k = paramK

			// create random array over Z_q
			w := make([]uint16, n*(encoder.k+1))
			for i := range w {
				w[i] = uint16(csrand.IntRange(0, int(q-1)))
			}

			// check that encoding and decoding returns the original array
			r := encoder.vectorEncodeNR(w)
			w2 := encoder.vectorDecodeNR(r)

			if !slices.Equal(w, w2) {
				t.Fatalf("vectorEncode not correct: expected %x, actual: %x", w, w2)
			}
		}
	}
}

func TestSamplePreimage(t *testing.T) {
	// test various values of d
	for _, d := range []int{4, 5, 10, 11} {
		t.Run(fmt.Sprintf("d=%d", d), func(t *testing.T) {
			testSamplePreimage(t, d)
		})
	}
}

func testSamplePreimage(t *testing.T, d int) {
	for y := range q {
		// TODO change this test and SamplePreimage to work off of compressed values and include decompression
		comprX := compressSingle(y, d)
		x := decompressSingle(comprX, d) // only these values can actually show up after decompression

		// repeat for randomness in samplePreimage
		for range numRepeatsPreimg {
			// SamplePreimage
			preim := samplePreimage(d, x, comprX)

			// check that preim compresses to the same as uncompressed
			comprPreim := compressSingle(preim, d)

			if comprPreim != comprX {
				t.Fatalf("samplePreimage not correct: d=%d, x=%d, preim=%d, comprX=%d, comprPreim=%d", d, x, preim, comprX, comprPreim)
			}
		}
	}
}

// Tests correctness and completeness of the equivalence sets, generates files too
func TestEquivSets(t *testing.T) {
	for _, d := range []int{4, 5, 10, 11} {
		for _, set := range getEquivSets(d) {
			// check that all entries of set compress to the same value
			target := compressSingle(set[0], d)
			for _, other := range set[1:] {
				compr := compressSingle(other, d)
				if target != compr {
					t.Fatalf("equivalence set not correct: d=%d, x=%d, target=%d, compr=%d", d, set[0], target, compr)
				}
			}
		}
		for x := range q {
			// check that equivalence set index is valid
			idx := getEquivSetIndex(d, x)
			if idx < 0 || idx >= len(getEquivSets(d)) {
				t.Fatalf("equivalence set not complete: d=%d, x=%d, index=%d", d, x, idx)
			}
		}
	}
}

// Returns an index i which, together with d, identifies uniquely
// to which equivalence set the uncompressed value u from Z_q belongs.
func getEquivSetIndex(d int, u uint16) int {
	for i, set := range getEquivSets(d) {
		if slices.Contains(set, u) {
			return i
		}
	}
	return -1
}

// Used to save equivalence sets for reuse among tests
var equivSetsCache = map[int][][]uint16{}

// getEquivSets returns all equivalence sets for a given value of d.
// i.e. all groups of integers in Z_q that compress to the same value.
func getEquivSets(d int) [][]uint16 {
	// check if d is present in equivSetsCache
	sets, ok := equivSetsCache[d]
	if !ok {
		// generate equivalence sets
		var seen []uint16
		for x := range q {
			if slices.Contains(seen, x) {
				continue
			}

			var setX []uint16
			for y := range q {
				if compressSingle(x, d) == compressSingle(y, d) {
					setX = append(setX, y)
				}
			}
			seen = append(seen, setX...)
			sets = append(sets, setX)
		}

		// save to file and cache
		equivSetsCache[d] = sets
		var content strings.Builder
		for _, set := range sets {
			for i, val := range set {
				if i == 0 {
					compressed := compressSingle(val, d)
					decompressed := decompressSingle(compressed, d)
					fmt.Fprintf(&content, "c=%d -> %d: %d", compressed, decompressed, val)
				} else {
					fmt.Fprintf(&content, ", %d", val)
				}
			}
			content.WriteString("\n")
		}
		filePath := fmt.Sprintf("testdata/equivalence_sets_d%d.txt", d)
		err := os.WriteFile(filePath, []byte(content.String()), 0644)
		if err != nil {
			panic(fmt.Sprintf("Unable to save equivalence set to file: %s", err.Error()))
		}
	}
	return sets
}
